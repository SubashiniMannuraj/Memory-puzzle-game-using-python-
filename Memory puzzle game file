import pygame
import random
import sys
from pygame.locals import *

# Initialize Pygame
pygame.init()

# Constants
WINDOW_WIDTH = 640
WINDOW_HEIGHT = 480
FPS = 30
BOARD_WIDTH = 4
BOARD_HEIGHT = 4
CARD_SIZE = 100
GAP_SIZE = 10
BG_COLOR = (60, 60, 60)
CARD_BACK_COLOR = (255, 255, 255)
CARD_FRONT_COLOR = (0, 0, 0)
TEXT_COLOR = (255, 255, 255)
FONT = pygame.font.Font(None, 36)

# Calculate the margin to center the board
X_MARGIN = (WINDOW_WIDTH - (BOARD_WIDTH * (CARD_SIZE + GAP_SIZE))) // 2
Y_MARGIN = (WINDOW_HEIGHT - (BOARD_HEIGHT * (CARD_SIZE + GAP_SIZE))) // 2

# Initialize screen
screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
pygame.display.set_caption('Memory Puzzle')

# Function to get random pairs of shapes
def get_randomized_board():
    icons = list(range(1, (BOARD_WIDTH * BOARD_HEIGHT // 2) + 1)) * 2
    random.shuffle(icons)
    board = []
    for x in range(BOARD_WIDTH):
        column = []
        for y in range(BOARD_HEIGHT):
            column.append(icons[0])
            del icons[0]
        board.append(column)
    return board

def get_box_at_pixel(x, y):
    for box_x in range(BOARD_WIDTH):
        for box_y in range(BOARD_HEIGHT):
            left, top = left_top_coords_of_box(box_x, box_y)
            box_rect = pygame.Rect(left, top, CARD_SIZE, CARD_SIZE)
            if box_rect.collidepoint(x, y):
                return (box_x, box_y)
    return (None, None)

def left_top_coords_of_box(box_x, box_y):
    left = box_x * (CARD_SIZE + GAP_SIZE) + X_MARGIN
    top = box_y * (CARD_SIZE + GAP_SIZE) + Y_MARGIN
    return (left, top)

def draw_card(box_x, box_y, number):
    left, top = left_top_coords_of_box(box_x, box_y)
    pygame.draw.rect(screen, CARD_BACK_COLOR, (left, top, CARD_SIZE, CARD_SIZE))
    text_surf = FONT.render(str(number), True, CARD_FRONT_COLOR)
    text_rect = text_surf.get_rect()
    text_rect.center = (left + CARD_SIZE // 2, top + CARD_SIZE // 2)
    screen.blit(text_surf, text_rect)

def draw_board(board, revealed):
    for box_x in range(BOARD_WIDTH):
        for box_y in range(BOARD_HEIGHT):
            left, top = left_top_coords_of_box(box_x, box_y)
            if not revealed[box_x][box_y]:
                pygame.draw.rect(screen, CARD_BACK_COLOR, (left, top, CARD_SIZE, CARD_SIZE))
            else:
                draw_card(box_x, box_y, board[box_x][box_y])

def main():
    # Initialize variables
    main_board = get_randomized_board()
    revealed_boxes = [[False] * BOARD_HEIGHT for i in range(BOARD_WIDTH)]
    first_selection = None

    # Main game loop
    while True:
        mouse_clicked = False
        screen.fill(BG_COLOR)
        draw_board(main_board, revealed_boxes)

        for event in pygame.event.get():
            if event.type == QUIT or (event.type == KEYUP and event.key == K_ESCAPE):
                pygame.quit()
                sys.exit()
            elif event.type == MOUSEBUTTONUP:
                mouse_x, mouse_y = event.pos
                box_x, box_y = get_box_at_pixel(mouse_x, mouse_y)
                if box_x is not None and not revealed_boxes[box_x][box_y]:
                    revealed_boxes[box_x][box_y] = True
                    if first_selection is None:
                        first_selection = (box_x, box_y)
                    else:
                        first_num = main_board[first_selection[0]][first_selection[1]]
                        second_num = main_board[box_x][box_y]
                        if first_num != second_num:
                            pygame.time.wait(1000)
                            revealed_boxes[first_selection[0]][first_selection[1]] = False
                            revealed_boxes[box_x][box_y] = False
                        first_selection = None
                    mouse_clicked = True

        pygame.display.update()
        pygame.time.Clock().tick(FPS)

if __name__ == '__main__':
    main()
